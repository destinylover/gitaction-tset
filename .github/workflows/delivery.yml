name: Delivery to S3 # ec2 배포 과정에서 버그로 s3만 적용

on:
  push:
    branches:
      - release/**  # CI_CD/로 시작하는 브랜치에 푸시 또는 병합될 때 워크플로우 실행f
      # 배포 확인 후 main으로 변경22

jobs:
  build-and-delivery:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Make Gradle Wrapper executable # 빌드시 권한 거부 문제 때문에 권한 부여
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean -x test bootJar # 빌드시 오류가 나기 때문에 -x test로 빌드 테스트 무시 후 빌드

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Delivery to S3
        run: aws s3 cp build/custom-libs/*.jar s3://aichat-s3/

      - name: Deploy to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          # 배포를 위한 대상 변수 선언
          INSTANCE_IDS=("i-0de335f5d7d39eae2")
          S3_BUCKET_NAME="aichat-s3"

          # Prepare SSH key for use
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # EC2 배포 함수 선언
          deploy_on_ec2() {
            INSTANCE_ID=$1
            PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[*].Instances[*].PublicIpAddress" --output text)

            # Find the most recent JAR file in the S3 bucket
            JAR_FILE_NAME=$(aws s3api list-objects-v2 --bucket $S3_BUCKET_NAME --query "Contents[?contains(Key, '.jar')].{Key: Key, LastModified: LastModified} | sort_by(@, &LastModified) | [-1].Key" --output text)
            echo "Latest JAR file in S3: $JAR_FILE_NAME"

            # Install JDK on EC2 instance if not already installed
            ssh -tt -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@$PUBLIC_IP << 'EOF'
          if ! java -version 2>&1 | grep -q "17"; then
            sudo apt update
            sudo apt install -y openjdk-17-jdk
          else
            echo "JDK 17 is already installed."
          fi
          EOF

            # Copy the JAR file from S3 to EC2 instance
            ssh -tt -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@$PUBLIC_IP << EOF
          aws s3 cp s3://$S3_BUCKET_NAME/$JAR_FILE_NAME /home/ec2-user/
          EOF

            # Create necessary directories
            ssh -tt -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@$PUBLIC_IP << 'EOF'
          sudo mkdir -p /var/logs/spring
          sudo mkdir -p /home/ec2-user/logrotate_config
          EOF

            # Run the application
            ssh -tt -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@$PUBLIC_IP << EOF
          nohup java -jar /home/ec2-user/$JAR_FILE_NAME > /var/logs/spring/app.log 2>&1 &
          EOF
          }

          # 배포 함수 호출
          for INSTANCE_ID in "${INSTANCE_IDS[@]}"; do
            deploy_on_ec2 $INSTANCE_ID
          done
