name: Delivery to S3 and Deploy to EC2

on:
  push:
    branches:
      - release/**  # release/로 시작하는 브랜치에 푸시 또는 병합될 때 워크플로우 실행5

jobs:
  build-and-delivery:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Make Gradle Wrapper executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean -x test bootJar

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Delivery to S3
        run: aws s3 cp build/custom-libs/*.jar s3://aichat-s3/

      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/your-key.pem
          chmod 600 ~/.ssh/your-key.pem

      - name: Deploy to EC2
        run: |
          # 배포를 위한 대상 변수 선언
          INSTANCE_IDS=("i-0de335f5d7d39eae2")  # EC2 인스턴스 ID 목록
          KEY_PATH="~/.ssh/your-key.pem"  # SSH 키 경로
          S3_BUCKET_NAME="aichat-s3"  # S3 버킷 이름
          
          
          # EC2 배포 함수 선언
          deploy_on_ec2() {
            INSTANCE_ID=$1
            PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
            PUBLIC_IP=$(echo $PUBLIC_IP | tr -d '\r') 

            # Install JDK on EC2 instance if not already installed
            ssh -T -o StrictHostKeyChecking=no -i $KEY_PATH ubuntu@$PUBLIC_IP << 'EOF'
              if ! java -version 2>&1 | grep -q "17"; then
                sudo apt update
                sudo apt install -y openjdk-17-jdk
              else
                echo "JDK 17 is already installed."
              fi
          EOF

            # Find the latest JAR file in S3 and copy it to EC2 instance
            ssh -T -o StrictHostKeyChecking=no -i $KEY_PATH ubuntu@$PUBLIC_IP << EOF
              # Find the most recent JAR file in the S3 bucket
              LATEST_JAR=$(aws s3 ls s3://$S3_BUCKET_NAME/ --recursive | grep '.jar' | sort | tail -n 1 | awk '{print $4}')
          
              if [ -n "$LATEST_JAR" ]; then
                aws s3 cp s3://$S3_BUCKET_NAME/$LATEST_JAR /home/ubuntu/
                echo "Downloaded file: $LATEST_JAR"
                JAR_FILE_NAME=$LATEST_JAR
              else
                echo "No JAR file found in the S3 bucket."
                exit 1
              fi
          EOF

            # Create necessary directories
            ssh -T -o StrictHostKeyChecking=no -i $KEY_PATH ubuntu@$PUBLIC_IP << 'EOF'
              sudo mkdir -p /var/logs/spring
              sudo mkdir -p /home/ubuntu/logrotate_config
          EOF

            # Run the application with the latest JAR file
            ssh -T -o StrictHostKeyChecking=no -i $KEY_PATH ubuntu@$PUBLIC_IP << EOF
              nohup java -jar /home/ubuntu/$JAR_FILE_NAME > /var/logs/spring/app.log 2>&1 &
          EOF
          }

          # 배포 함수 호출
          for INSTANCE_ID in "${INSTANCE_IDS[@]}"; do
            deploy_on_ec2 $INSTANCE_ID
          done
